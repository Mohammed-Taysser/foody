openapi: 3.0.0
info:
  title: Foody API
  version: 1.0.22
  description: API documentation for the Foody restaurant platform
  contact:
    name: Mohammed Taysser
    url: https://github.com/mohammed-taysser
    email: mohamedtaysser983@gmail.com
externalDocs:
  description: GitHub Repository
  url: https://github.com/mohammed-taysser/foody

servers:
  - url: /api/
    description: Development server

  - url: '{server}/api/'
    description: Production server with custom domain
    variables:
      server:
        default: ''
tags:
  - name: Auth
    description: Authentication related endpoints
  - name: Permissions
    description: Permission management
  - name: Users
    description: User-related operations
  - name: Restaurants
    description: Restaurant management
  - name: Categories
    description: Menu category management per restaurant
  - name: Menu Items
    description: Menu items within restaurant
  - name: Analytics
    description: Metrics and chart data

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                  format: string
                  example: 'John Doe'
                email:
                  type: string
                  format: email
                  example: 'john@example.com'
                password:
                  type: string
                  format: password
                  example: 'StrongPassword123'
                role:
                  type: string
                  default: CUSTOMER
                  format: string
                  enum: [CUSTOMER, OWNER, ADMIN]
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: 1B3yK@example.com
                password:
                  type: string
                  format: password
                  example: 'StrongPassword123'
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: New access token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: string

  /permissions:
    get:
      tags: [Permissions]
      summary: Get all permissions
      responses:
        200:
          description: List of permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All permissions
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Permission'
                      metadata:
                        $ref: '#/components/schemas/PaginationMetadata'

    post:
      tags: [Permissions]
      summary: Create a new permission
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        201:
          description: Permission created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Permission'

  /permissions/list:
    get:
      tags: [Permissions]
      summary: Get a list of permissions
      responses:
        200:
          description: List of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'

  /permissions/{permissionId}:
    get:
      tags: [Permissions]
      summary: Get a permission by ID
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Permission found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Permission'

    patch:
      tags: [Permissions]
      summary: Update a permission by ID
      security:
        - bearerAuth: []
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Permission updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Permission'

    delete:
      tags: [Permissions]
      summary: Delete a permission by ID
      security:
        - bearerAuth: []
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Permission deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Permission'

  /permissions/permission-groups:
    get:
      tags: [Permissions]
      summary: Get all permission groups
      responses:
        200:
          description: List of permission groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'

    post:
      tags: [Permissions]
      summary: Create a new permission group
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        201:
          description: Permission group created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PermissionGroup'

  /permissions/permission-groups/list:
    get:
      tags: [Permissions]
      summary: Get a list of permission groups
      responses:
        200:
          description: List of permission groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'

  /permissions/permission-groups/{permissionGroupId}:
    get:
      tags: [Permissions]
      summary: Get a permission group by ID
      parameters:
        - name: permissionGroupId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Permission group found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PermissionGroup'

    patch:
      tags: [Permissions]
      summary: Update a permission group by ID
      security:
        - bearerAuth: []
      parameters:
        - name: permissionGroupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Permission group updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PermissionGroup'

    delete:
      tags: [Permissions]
      summary: Delete a permission group by ID
      security:
        - bearerAuth: []
      parameters:
        - name: permissionGroupId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Permission group deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PermissionGroup'

  /users/me:
    get:
      tags: [Users]
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Current user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'

    patch:
      tags: [Users]
      summary: Update current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [CUSTOMER, OWNER, ADMIN]
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'

  /users/me/permissions:
    get:
      tags: [Users]
      summary: Get current user permissions
      security:
        - bearerAuth: []
      responses:
        200:
          description: Current user permissions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          properties:
                            action:
                              type: enum
                              enum: [add, view, update, delete]
                            module:
                              type: string

  /users:
    get:
      summary: Get all users
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/LimitParameter'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All users
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      metadata:
                        $ref: '#/components/schemas/PaginationMetadata'

    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - role
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [CUSTOMER, OWNER, ADMIN]
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created
                  data:
                    schema:
                      allOf:
                        - $ref: '#/components/schemas/SuccessResponse'
                        - type: object
                          properties:
                            data:
                              $ref: '#/components/schemas/User'

  /users/list:
    get:
      summary: Get a list of users
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'

  /users/{userId}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User found
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [CUSTOMER, OWNER, ADMIN]

      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Users]
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: { deleted: true }

  /restaurants:
    get:
      tags: [Restaurants]
      summary: Get all restaurants
      parameters:
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/LimitParameter'
      responses:
        200:
          description: List of restaurants
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All restaurants
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Restaurant'
                      metadata:
                        $ref: '#/components/schemas/PaginationMetadata'

    post:
      tags: [Restaurants]
      summary: Create a new restaurant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - address
              properties:
                name:
                  type: string
                address:
                  type: string
      responses:
        201:
          description: Restaurant created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Restaurant'

  /restaurants/list:
    get:
      tags: [Restaurants]
      summary: Get a list of restaurants
      responses:
        200:
          description: List of restaurants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'

  /restaurants/{restaurantId}:
    get:
      tags: [Restaurants]
      summary: Get a specific restaurant by ID
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Restaurant found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Restaurant'

    patch:
      tags: [Restaurants]
      summary: Update a specific restaurant by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
      responses:
        200:
          description: Restaurant updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Restaurant'

    delete:
      tags: [Restaurants]
      summary: Delete a specific restaurant by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Restaurant deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: { deleted: true }

  /categories:
    get:
      tags: [Categories]
      summary: Get all categories
      parameters:
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/LimitParameter'
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All categories
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
                      metadata:
                        $ref: '#/components/schemas/PaginationMetadata'

    post:
      tags: [Categories]
      summary: Create a new category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - restaurantId
              properties:
                name:
                  type: string
                restaurantId:
                  type: string
      responses:
        201:
          description: Category created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'

  /categories/list:
    get:
      tags: [Categories]
      summary: Get a list of categories
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'

  /categories/{categoryId}:
    get:
      tags: [Categories]
      summary: Get a specific categories by ID
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Category found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'

    patch:
      tags: [Categories]
      summary: Update a specific category by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                restaurantId:
                  type: string
      responses:
        200:
          description: Category updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'

    delete:
      tags: [Categories]
      summary: Delete a specific category by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Category deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: { deleted: true }

  /menu-items:
    get:
      tags: [Menu Items]
      summary: Get all menu
      parameters:
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/LimitParameter'
      responses:
        200:
          description: List of menu
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All menus
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/MenuItem'
                      metadata:
                        $ref: '#/components/schemas/PaginationMetadata'

    post:
      tags: [Menu Items]
      summary: Create a new menu
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - address
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                restaurantId:
                  type: string
                categoryId:
                  type: string
                available:
                  type: boolean
      responses:
        201:
          description: Menu created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Menu'

  /menu-items/list:
    get:
      tags: [Menu Items]
      summary: Get a list of menus
      responses:
        200:
          description: List of menus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'

  /menu-items/{menuId}:
    get:
      tags: [Menu Items]
      summary: Get a specific menu by ID
      parameters:
        - in: path
          name: menuId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Menu found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MenuItem'

    patch:
      tags: [Menu Items]
      summary: Update a specific menu by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: menuId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                available:
                  type: boolean
      responses:
        200:
          description: Menu updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MenuItem'

    delete:
      tags: [Menu Items]
      summary: Delete a specific menu by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: menuId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Menu deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: { deleted: true }

  /analytics:
    get:
      tags: [Analytics]
      summary: Get platform analytics
      security:
        - bearerAuth: []
      responses:
        200:
          description: Metrics and chart data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Dashboard analytics
                  data:
                    type: object
                    properties:
                      totals:
                        type: object
                        properties:
                          users:
                            type: integer
                            example: 95
                          restaurants:
                            type: integer
                            example: 21
                          categories:
                            type: integer
                            example: 45
                          menuItem:
                            type: integer
                            example: 123
                      thisWeek:
                        type: object
                        properties:
                          users:
                            type: integer
                            example: 95
                          restaurants:
                            type: integer
                            example: 21
                          categories:
                            type: integer
                            example: 45
                          menuItem:
                            type: integer
                            example: 123
                      lastWeek:
                        type: object
                        properties:
                          users:
                            type: integer
                            example: 0
                          restaurants:
                            type: integer
                            example: 0
                          categories:
                            type: integer
                            example: 0
                          menuItem:
                            type: integer
                            example: 0
                      growth:
                        type: object
                        properties:
                          users:
                            type: integer
                            example: 100
                          restaurants:
                            type: integer
                            example: 100
                          categories:
                            type: integer
                            example: 100
                          menuItem:
                            type: integer
                            example: 100

components:
  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          format: boolean
          example: true
        message:
          type: string
          format: string
          example: Operation completed successfully
        data:
          type: object
          nullable: true

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          format: boolean
          example: false
        message:
          type: string
          format: string
          example: Invalid input
        statusCode:
          type: integer
          format: integer
          example: 400
        errors:
          type: array
          nullable: true
          items:
            type: string
          example:
            - Email is already registered
            - Password must be at least 6 characters

    PaginationMetadata:
      type: object
      properties:
        total:
          type: integer
          example: 125
        page:
          type: integer
          example: 2
        limit:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 13

    ListResponse:
      type: object
      properties:
        success:
          type: boolean
          format: boolean
          example: true
        message:
          type: string
          format: string
          example: Operation completed successfully
        data:
          type: array
          items:
            properties:
              id:
                type: string
                format: uuid
                example: 123e4567-e89b-12d3-a456-426655440000
              name:
                type: string
                example: John Doe

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        name:
          type: string
          format: string
          example: John Doe
        email:
          type: string
          format: email
          example: 1B3yK@example.com
        role:
          type: string
          enum: [CUSTOMER, OWNER, ADMIN]
          example: CUSTOMER
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        name:
          type: string
          format: string
          example: Burgers
        restaurantId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

    Restaurant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        name:
          type: string
          format: string
          example: Pizza Hut
        description:
          type: string
          format: string
          example: Pizza Hut description
        location:
          type: string
          format: string
          example: 123 Main Street, New York, NY
        ownerId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

    MenuItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        name:
          type: string
          example: Burger
          format: string
        description:
          type: string
          example: A juicy burger
          format: string
        price:
          type: number
          format: float
          example: 9.99
        available:
          type: boolean
          default: true
          format: boolean
        restaurantId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        categoryId:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

    Permission:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        key:
          type: string
          format: string
          example: add_item
        description:
          type: string
          format: string
          example: Add a new item
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

    PermissionGroup:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        name:
          type: string
          format: string
          example: Manager
        description:
          type: string
          format: string
          example: Manager description
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from authentication endpoint

  parameters:
    PageParameter:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1

    LimitParameter:
      name: limit
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 500
