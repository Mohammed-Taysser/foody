openapi: 3.0.0
info:
  title: Foody API
  version: 1.0.22
  description: API documentation for the Foody restaurant platform
externalDocs:
  description: GitHub Repository
  url: https://github.com/mohammed-taysser/foody

servers:
  - url: /api/
    description: Development server

  - url: '{server}/api/'
    description: Production server with custom domain
    variables:
      server:
        default:
tags:
  - name: Auth
    description: Authentication related endpoints
  - name: Users
    description: User-related operations
  - name: Restaurants
    description: Restaurant management
  - name: Categories
    description: Menu category management per restaurant
  - name: Menu Items
    description: Menu items within restaurant

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/AuthRegisterRequest'
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/AuthLoginRequest'
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: New access token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: string

  /users/me:
    get:
      tags: [Users]
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Current user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'

  /restaurants:
    get:
      tags: [Restaurants]
      summary: Get all restaurants
      responses:
        200:
          description: List of restaurants
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Restaurant'

  /restaurants/{id}/categories:
    get:
      tags: [Categories]
      summary: List all categories for a restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Categories with their items
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'

  /restaurants/{id}/categories/{categoryId}:
    patch:
      tags: [Categories]
      summary: Update a category
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/inputs/CategoryInput'
      responses:
        200:
          description: Category updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'

    delete:
      tags: [Categories]
      summary: Delete a category
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Category deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: { deleted: true }

  /restaurants/{id}/menu:
    get:
      tags: [Menu Items]
      summary: Get all menu items for a restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationOffset'
      responses:
        200:
          description: List of menu items
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/MenuItem'

    post:
      tags: [Menu Items]
      summary: Create a menu item for a restaurant
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, price]
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                available:
                  type: boolean
                categoryId:
                  type: string

      responses:
        201:
          description: Menu item created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MenuItem'

  /restaurants/{restaurantId}/menu/{menuItemId}:
    patch:
      tags: [Menu Items]
      summary: Update a menu item
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
        - in: path
          name: menuItemId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                available:
                  type: boolean
                categoryId:
                  type: string
      responses:
        200:
          description: Menu item updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MenuItem'

    delete:
      tags: [Menu Items]
      summary: Delete a menu item
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
        - in: path
          name: menuItemId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Menu item deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: { deleted: true }

components:
  inputs:
    CategoryInput:
      type: object
      required: [name]
      properties:
        name:
          type: string
          format: string
          example: 'Burgers'

  requestBodies:
    AuthLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: 1B3yK@example.com
        password:
          type: string
          format: password
          example: 'StrongPassword123'

    AuthRegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          format: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: 'john@example.com'
        password:
          type: string
          format: password
          example: 'StrongPassword123'
        role:
          type: string
          default: CUSTOMER
          format: string
          enum: [CUSTOMER, OWNER, ADMIN]

  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          format: boolean
          example: true
        message:
          type: string
          format: string
          example: Operation completed successfully
        data:
          type: object
          nullable: true

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          format: boolean
          example: false
        message:
          type: string
          format: string
          example: Invalid input
        statusCode:
          type: integer
          format: integer
          example: 400
        errors:
          type: array
          nullable: true
          items:
            type: string
          example:
            - Email is already registered
            - Password must be at least 6 characters

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        name:
          type: string
          format: string
          example: John Doe
        email:
          type: string
          format: email
          example: 1B3yK@example.com
        role:
          type: string
          enum: [CUSTOMER, OWNER, ADMIN]
          example: CUSTOMER
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          $ref: '#/components/schemas/User'

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        name:
          type: string
          format: string
          example: Burgers
        restaurantId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

    Restaurant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        name:
          type: string
          format: string
          example: Pizza Hut
        description:
          type: string
          format: string
          example: Pizza Hut description
        location:
          type: string
          format: string
          example: 123 Main Street, New York, NY
        ownerId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

    MenuItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        name:
          type: string
          example: Burger
          format: string
        description:
          type: string
          example: A juicy burger
          format: string
        price:
          type: number
          format: float
          example: 9.99
        available:
          type: boolean
          default: true
          format: boolean
        restaurantId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        categoryId:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
      required:
        - name

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PaginationLimit:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
      description: Max number of results to return

    PaginationOffset:
      in: query
      name: offset
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Number of results to skip
